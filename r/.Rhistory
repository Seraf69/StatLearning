"rf"]
rf
rf <- ((1 + rf/100)^(365) - 1) * 100
head(rf)
tail(rf)
dr <- diff(rf)
dr
head(dr)
rf <- Finance[,"rf"]
rf <- ((1 + rf/100)^(365) - 1) * 100
dr <- diff(rf)
dr
res_0 <- lm(dr ~ rf[-length(rf)])
res_0
rf
lenght(rf)
length(rf)
rf[-length(rf)]
length(rf)
lenght(dr)
length(dr)
length(rf[-length(rf)])
res_0 = sm.OLS(dr, rf.ix[:-len(rf)])
rf
rf[-length(rf)])
rf[-length(rf)]
rf
rf[-length(rf)]
res_0
rf = df['rf']
rf = ((1 + rf / 100) ** (365) - 1) * 100  # Scaling to avoid numerical issues.
res_0
tet0 <- c(res_0$coef, var(residuals(res_0)), 0)
tet0
res_0
res_0$coefficients
res_0$coef
var(residuals(res_0))
residuals?
0
help(residuals)
res_0 = sm.OLS(dr, sm.add_constant(rf.ix[dr.index])).fit()
coef = res_0.params
tet0
res_rf <- gmm(g6, rf, tet0, control = list(maxit = 1000, reltol = 1e-10))
coef(res_rf)
rf <- Finance[,"rf"]
rf <- ((1 + rf/100)^(365) - 1) * 100
dr <- diff(rf)
res_0 <- lm(dr ~ rf[-length(rf)])
tet0 <- c(res_0$coef, var(residuals(res_0)), 0)
names(tet0) <- c("alpha", "beta", "sigma^2", "gamma")
res_rf <- gmm(g6, rf, tet0, control = list(maxit = 1000, reltol = 1e-10))
coef(res_rf)
res_fr
res_rf
coef(res_rf)
library(gmm)
data(Finance)  # Included in the gmm library.
g6 <- function(theta, x) {
t <- length(x)
et1 <- diff(x) - theta[1] - theta[2] * x[-t]
ht <- et1^2 - theta[3] * x[-t]^(2 * theta[4])
g <- cbind(et1, et1 * x[-t], ht, ht * x[-t])
return(g)
}
rf <- Finance[,"rf"]
rf <- ((1 + rf/100)^(365) - 1) * 100
dr <- diff(rf)
res_0 <- lm(dr ~ rf[-length(rf)])
tet0 <- c(res_0$coef, var(residuals(res_0)), 0)
names(tet0) <- c("alpha", "beta", "sigma^2", "gamma")
res_rf <- gmm(g6, rf, tet0, control = list(maxit = 1000, reltol = 1e-10))
coef(res_rf)
x
t = length(x)
x[-t]
x <- rf
t <- length(x)
et1 <- diff(x) - theta[1] - theta[2] * x[-t]
theta = cbind(1, 1, 1, 1)
theta
theta = c(1, 1, 1, 1)
theta
et1 <- diff(x) - theta[1] - theta[2] * x[-t]
eta1
et1
ht <- et1^2 - theta[3] * x[-t]^(2 * theta[4])
ht
g <- cbind(et1, et1 * x[-t], ht, ht * x[-t])
g
length(ht)
g
head(g)
index(g)
head(g)
x
b = c(1, 2, 3, 4)
diff(b)
t = length(b)
t
t <- length(b)
t
diff(b) - b[-t]
b[-t]
diff(b)
et1 <- diff(x) - theta[1] - theta[2] * x[-t]
eta1
et1
ht
head(ht)
head(ht, 20)
heat(eta1, 19)
heat(et1, 19)
head(et1, 19)
head(et1, 20)
gmm
x
g
g6
g6
head(et1,20)
head(et1,21)
theta
theta[2]
theta[2] * x[-t]
t
xt
t
t <- length(x)
t <- length(x)
et1 <- diff(x) - theta[1] - theta[2] * x[-t]
eta1
et1
head(et1,21)
ht <- et1^2 - theta[3] * x[-t]^(2 * theta[4])
head(ht, 20)
quit()
install.packages(foreign)
install.packages(hmisc)
library(foreign)
library(hmisc)
install.packages(Hmisc)
install.packages(Hmisc)
xpt = sasxport.get("/Users/tom/Desktop/names.sas7bdat")
library(Hmisc)
quit()
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
sasxport.get('/Users/tom/Desktop/names.sas7bdat')
quit()
version()
version
library(ggplot2)
install.packages(ggplot2)
ggplot2
library(ggplot)
install.packages("ggplot2")
install.packages("GMM")
install.packages("gmm")
install.packages("devtools")
devtools::install_github("bigvis")
library(bigvis)
df <- load(movies)
df <- movies
df
df
standardise(df)
weighted.ecdf(movies)
quit
libary(gmm)
df <- read.csv('~/Desktop/test.csv')
libary(gmm)
df <- read.csv('~/Desktop/test.csv')
libary(gmm)
library(gmm)
library(gmm)
df <- read.csv('~/Desktop/test.csv')
df
df.head()
df
head(df)
df['p']
2 * df['p']
head(df)
head(df) * head(df)
g1 <- function(theta, x):
{
t1 <- theta[1]
t2 <- theta[2]
m1 <- x['p'] ** 2 - t1 * df['s'] ** 2 - t2 * df['s'] * df['p']
return m1
}
g1 <- function(theta, x)
{
t1 <- theta[1]
t2 <- theta[2]
m1 <- x['p'] ** 2 - t1 * df['s'] ** 2 - t2 * df['s'] * df['p']
return m1
}
g1 <- function(theta, x)
{
t1 <- theta[1]
t2 <- theta[2]
m1 <- x['p'] ** 2 - t1 * df['s'] ** 2 - t2 * df['s'] * df['p']
return(m1)
}
g1
g1([2, 2], df)
g1((2, 2), df)
x = (2, 2)
x = cbind(2, 2)
g(x, df)
g1(x, df)
df['p']
df['p', 'c']
df[['p', 'c']]
df
df[]
df['c':'s']
df['c':'s']
x0 = cbind(2, 2)
res <- gmm(g1, df, x0)
set.seed(123)
n <- 200
x1 <- rnorm(n, mean = 4, sd = 2)
x1
print(res <- gmm(g1,x1,c(mu = 0, sig = 0)))
library(gmm)
pwd
df = read.csv('~/Desktop/gmm_test.csv')
head(df)
dta <- read.csv('~/Economics/Econometrics_2/programming/sp500.csv')
dta
dta['close']
arma(dta['close'])
arma()
arima
arima()
arima(dta['close'], order=c(2, 1))
arima(dta['close'], order=c(2, 0, 1))
library(gmm)
data(Finance)
r <- Finance[1:500,1:5]
rm <- Finance[1:500,"rm"]
head(rm)
hear(r)
head(r)
write.csv('~/Desktop/finance_r.csv', r)
write.table(r, "~/Desktop/finance_r.csv")
write.table('rm, "~/Desktop/finance_rm.csv")
?
2
a
))
''
'')''''
write.table(rm, "~/Desktop/finance_rm.csv")
write.csv(rm, "~/Desktop/finance_rm.csv")
r
head(r)
write.csv(rm, "~/Desktop/finance_rm.csv", quote=False)
write.table(rm, "~/Desktop/finance_rm.csv", quote=False)
write.table(rm, "~/Desktop/finance_rm.csv", quote=FALSE)
write.table(r, "~/Desktop/finance_rm.csv", quote=False)
write.table(r, "~/Desktop/finance_rm.csv", quote=FALSE)
write.table(r, "~/Desktop/finance_r.csv", quote=FALSE)
write.table(rm, "~/Desktop/finance_rm.csv", quote=FALSE)
rm
head(rm0)
head(rm)
fix(res_rf)
cbind(rm, r)
head(cbind(rm, r))
head(rm)
c(0, 0)
as.matrix(cbind(rm, r)), c(0, 0))
as.matrix(cbind(rm, r))
head(as.matrix(cbind(rm, r)))
as.matrix(cbind(rm, r))
x = as.matrix(cbind(rm, r))
c[x, 1]
c(x[, 1])
head(c(x[, 1]))
x[, 1]
head(x[, 1])
head(x[, 2:6])
1 + head(x[, 2:6])
c(x[,1])*(1+x[,2:6])
c(x[,1])*(1+x[,2:6]).shape
ls
ols
quit()
version
quit
quit()
df = read.csv('/Users/tom/Desktop/dta.csv')
head(df)
df = read.csv('/Users/tom/Desktop/dta.csv', row.names='id')
head(df)
library(gmm)
library("gmm")
library(GMM)
installed.packages
installed.packages()
install.packages("gmm")
library(gmm)
install.packages("ggplot2")
dta
df
dot(df.T, df)
df.T * df.T
df
matrix(df)
head(df)
df
type(df)
df
df * df
head(df * df)
theta = cbind([1, 2, 3, 4])
theta = cbind(1, 2, 3, 4)
theta
theta * df[1]
df[1]
head(df)
df.2
df(2)
get(2)
get(df, 2)
df[2,]
theta * df[2,]
theta * df
shape(theta)
head(theta * df)
head(df, theta)
length(theta)
length(df)
nls
nls(formula='')
head(df)
nls(formula='hhninc ~ exp(age + educ + female)', data=df)
exp(2)
nls(formula='hhninc ~ exp(age + educ + female)', data=df)
nls(formula='hhninc ~ exp(age + educ + female)', data=df, start=cbind(-1, 2, 3, 4))
nls(hhninc ~ exp(age + educ + female), data=df)
require(graphics)
DNase1 <- subset(DNase, Run == 1)
## using a selfStart model
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
summary(fm1DNase1)
fm1DNase1
nls(hhninc ~ exp(age + educ + female), df)
nls(hhninc ~ exp(age + educ + female), data=df, start=list(age=-1, educ=2, female=1))
head(DNase1)
head(df)
res <- nls(hhninc ~ exp(age + educ + female), df)
res <- nls(hhninc ~ exp(age, educ, female), df)
res <- nls(hhninc ~ exp(age + educ + female), df)
res <- nls(hhninc ~ exp(1 + age + educ + female), df)
res <- nls(hhninc ~ exp(1 + age + educ + female), df, start=list(1, 2, 3, 4))
res <- nls(hhninc ~ exp(age + educ + female), df, start=list(1, 2, 3, 4))
res <- nls(hhninc ~ exp(age + educ + female), df, start=list(age=2, educ=3, female=4))
fm3DNase1 <- nls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),
data = DNase1,
start = list(Asym = 3, xmid = 0, scal = 1))
fm3DNase1
res
Asym
DNase1
formula(hhninc ~ exp(age + educ + female))
fm <- formula(hhninc ~ exp(age + educ + female))
fm
res <- nls(fm, df, start=list(age=2, educ=3, female=4))
dta <- read.csv('~/Economics/Econometrics_2/programming/sp500.csv')
arima(dta['close'], order=c(2, 0, 1))
q
quit()
help(arima)
cd
pwd
read.csv('~/Desktop/test.csv')
read.csv('~/Desktop/test.csv', header=False)
read.csv('~/Desktop/test.csv', header=false)
read.csv('~/Desktop/test.csv', header='false')
read.csv('~/Desktop/test.csv', header=False)
False
f
read.csv('~/Desktop/test.csv', header=0)
read.csv('~/Desktop/test.csv')
df <- read.csv('~/Desktop/test.csv')
df
lm(formula=a ~ 1 + b, data=df, weights=weights)
model = lm(formula=a ~ 1 + b, data=df, weights=weights)
model
model.frame
model.tables
summary(model)
library(cv)
cv
require(cv)
cv
install.packages(cv)
install.packages("cv")
install.packages("knitr")
library(ISLR)
summary(Hitters)
Hitters = na.omit(Hitters)
with(Hitters.sum(is.na(Salary)))
with(Hitters, sum(is.na(Salary)))
library(leaps)
install.packages("leaps")
regfit.full=regsubsets(Salary~.,data=Hitters)
library(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
summary(regfit.full)
regfit.full=regsubsets(Salary~.,data=Hitters, nvmax=19)
summary(regfit.full)
plot(reg.summary$cp, xab="Number of Variables", ylab="Cp")
reg.summary=summary(regfit.full)
summary(regfit.full)
plot(reg.summary$cp, xab="Number of Variables", ylab="Cp")
plot(reg.summary$cp, xab="Number of Variables", ylab="Cp")
regfit.fwd = regsubsets(Salary~., data=Hitters, nvmax=19, method='forward')
summary(regfit.fwd)
plot(regfit.fwd, scale="Cp")
```{r}
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,], nvmax=19, method='forward')
set.seed(1)
train = sample(seq(263), 180, replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,], nvmax=19, method='forward')
val.errors=rep(NA, 19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
plto(sqrt(val.errors), ylab="Root MSE", ylim=c(300, 400), pch=19, type="b")
plot(sqrt(val.errors), ylab="Root MSE", ylim=c(300, 400), pch=19, type="b")
folds=sample(rep(1:10, length=nrow(Hitters)))
set.seed(11)
folds=sample(rep(1:10, length=nrow(Hitters)))
folds
table(folds)
library(glmnet)
install.packages("glmnet")
library("glmnet")
?cv.glmnet
library(glmnet)
x=model.matrix(Salary~.-1, data=Hitters)
y = Hitters$Salary
fit.lasso(glmnet(x, y, alpha=1))
fit.ridge(glmnet(x, y, alpha=1))
fit.ridge=glmnet(x, y, alpha=1)
fit.ridge
?fit
?fit.ridge
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
ls()
list.files()
setwd('~/sandbox/StatLearning/r')
list.files()
load('5.R.RData')
list.files()
setwd('~/sandbox/StatLearning/r')
load('5.R.RData')
Xy
head(Xy)
mod <- lm('y ~ X1 + X2')
mod <- lm('y ~ X1 + X2', df)
mod <- lm('y ~ X1 + X2', Xy)
?boot
residuals(mod)
se <- function(y, X1, X2){
sigmasq <- var(residuals(lm(y ~ X1 + X2)))
dev <- sum((X1 - mean(X1))^2)
sigmasq / dev
}
y
df.y
df$y
Xy$y
se(Xy$y, Xy$X1, Xy$X2)
summary(mod)
se(Xy$y, Xy$X1, Xy$X2)
sqrt(sigmasq / dev)
se <- function(y, X1, X2){
sigmasq <- var(residuals(lm(y ~ X1 + X2)))
dev <- sum((X1 - mean(X1))^2)
sqrt(sigmasq / dev)
}
se(Xy$y, Xy$X1, Xy$X2)
se(mod)
summary(mod)
se(Xy$y, Xy$X1, Xy$X2)
mod.residuals
mod
mod$qr
mod$qr$tol
mod$residuals
mod$coefficients
mod$terms
mod$model$y
length(y)
